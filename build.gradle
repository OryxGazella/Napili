/*
 * Copyright 2012 by the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'groovy'
apply plugin: 'idea'

defaultTasks 'clean', 'launch'

version = appVersion
distsDirName = '../dist'

buildscript {

    final javafxHome = System.env['JAVAFX_HOME']
    if (javafxHome) {
        ext.javafxJar = "${javafxHome}/rt/lib/jfxrt.jar"
        if (!(new File(ext.javafxJar).exists())) {
            // If JAVAFX_HOME/rt/lib/jfxrt.jar doesn't exist, maybe the user
            // is pointing at the directory containing jfxrt.jar itself?
            ext.javafxJar = "${javafxHome}/jfxrt.jar"
        }
    } else {
        def javaHome = System.env['JAVA_HOME']
        if (!javaHome) {
            javaHome = System.properties['java.home']
        }
        if (javaHome) {
            println "Java Home is set to ${javaHome}"
            def javafxJar = "${javaHome}/lib/jfxrt.jar"
            if ((new File(javafxJar)).exists()) {
                ext.javafxJar = javafxJar
	    } else {
              // if its set to JDK, look for JRE
              javafxJar = "${javaHome}/jre/lib/jfxrt.jar"
              if ((new File(javafxJar)).exists()) 
                ext.javafxJar = javafxJar
            }
        }
    }
    try {
        println "JavaFX runtime jar: ${ext.javafxJar}"
        dependencies {
            classpath files(ext.javafxJar)
        }
    }
    catch (MissingPropertyException ignore) {
        println """
    Please set the environment variable JAVAFX_HOME or
    JAVA_HOME to a directory that contains rt/lib/jfxrt.jar or lib/jfxrt.jar
    of JavaFX version ${requiredJavaFxVersion}."""
        System.exit 1
    }
}

def findJavaFXAntJar() {

    final javafxHome = System.env['JAVAFX_HOME']

    if (javafxHome) {
        ext.javafxAntJar = "${javafxHome}/lib/ant-javafx.jar"
        if (!(new File(ext.javafxAntJar).exists())) {
            ext.javafxJar = "${javafxHome}/ant-javafx.jar"
        }
    } else {
        String javaHome = System.env['JAVA_HOME']
        if (!javaHome) {
            javaHome = System.properties['java.home']
        }
        if (javaHome) {
            def javafxAntJar = "${javaHome}/lib/ant-javafx.jar"
            if ((new File(javafxAntJar)).exists()) {
                ext.javafxAntJar = javafxAntJar
            } else {
                // we may be in the jre dir, try looking one level up
                javaHome = (new File(javaHome)).parent
                javafxAntJar = "${javaHome}/lib/ant-javafx.jar"
                if ((new File(javafxAntJar)).exists()) {
                    project.ext.javafxAntJar = javafxAntJar
                }
            }
        }
    }
    try {
        println "JavaFX antlib jar: ${project.ext.javafxAntJar}"
    }
    catch (MissingPropertyException ignore) {
        println """
    Please set the environment variable JAVAFX_HOME or
    JAVA_HOME to a directory that contains lib/ant-javafx.jar
    of JavaFX version ${requiredJavaFxVersion}."""
        System.exit 1
    }
}

repositories {
    mavenCentral()
}

dependencies {
  groovy "org.codehaus.groovy:groovy-all:${requiredGroovyVersion}"
  compile files(ext.javafxJar)
}


sourceSets {
    main {
        groovy {
            srcDir 'src'
        }
    }
}

task wrap(type: Wrapper, description: "create a gradlew") {
    gradleVersion = '1.1'
}

clean.doFirst {
    delete 'out'
    delete  distsDir
}

task launch(type: JavaExec, dependsOn: 'classes') {
    description = "Run the Napili Program"
    main = 'org.netdance.napili.Napili'
    classpath = sourceSets.main.output + sourceSets.main.compileClasspath
}

task launchDist(type: JavaExec, dependsOn: 'dist', description: 'Run the application, after building the jar') {
    main = '-jar'
    args = ["${distsDir}/Napili.jar"]
}

task libcopy(type: Sync) {
    from configurations.runtime
    into "${distsDir}/libs"
}

task dist(dependsOn: ['classes','libcopy']) << {

    findJavaFXAntJar()

    ant.taskdef(resource: "com/sun/javafx/tools/ant/antlib.xml",
                uri: "javafx:com.sun.javafx.tools.ant",
                classpath: ".:${project.ext.javafxAntJar}" )

    def javafxAnt = groovy.xml.NamespaceBuilder.newInstance(ant, 'javafx:com.sun.javafx.tools.ant')

    javafxAnt.resources(id: 'libRes')   {
        javafxAnt.fileset(dir: distsDir, includes: 'libs/*.jar', type: 'jar', requiredFor: 'startup')
    }

    javafxAnt.application(id: "NapiliApp", name: "Napili Turtle Graphics", mainClass: appMainClass)

    javafxAnt.jar(destfile: "${distsDir}/Napili.jar") {
        javafxAnt.application(refid: 'NapiliApp')
        javafxAnt.resources(refid: 'libRes')
        fileset(dir: "${buildDir}/classes/main")
        fileset(dir: "${distsDir}/libs", includes: "*.jar")
    }

    javafxAnt.deploy(width: appWidth, height: appHeight, nativeBundles: 'all', outdir: distsDir, outfile: appTitle){
        javafxAnt.application(name: appTitle, mainClass: appMainClass)
        javafxAnt.resources {
            fileset(dir: buildDir, includes: '*.jar')
        }
        javafxAnt.info(title: appTitle, vendor: appVendor)
    }
}

idea {
    module {
        excludeDirs += file('gradle/') // Gradle directory including the wrapper subdirectory.
        excludeDirs += file('.settings/') // Eclipse settings directory.
        excludeDirs += file('bin') // Eclipse compilation directory.
        excludeDirs += file('out') // IDEA compilation directory.
        excludeDirs += file('build') // Gradle compilation directory.
        excludeDirs += file('dist') // Gradle/netbeans dist directory.
    }
    project {
        ipr {
            withXml { provider ->
                final node = provider.asNode()
                node.component.find { it.'@name' == 'VcsDirectoryMappings' }.mapping[0].'@vcs' = 'Git'
                final gradleSettings = node.appendNode('component' , [name: 'GradleSettings'])
                gradleSettings.appendNode('option', [name: 'linkedProjectPath', value: '$PROJECT_DIR$/build.gradle'])

                def copyrightConfig = node.component.find { it.'@name' == 'CopyrightManager' }
                def copyrightNode = copyrightConfig.appendNode('copyright')
                copyrightNode.appendNode('option', [name: 'notice', value:
'''Copyright $today.year by the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.'''])
                copyrightNode.appendNode('option', [name: 'keyword', value: 'Copyright'])
                copyrightNode.appendNode('option', [name: 'myName', value: 'APL 2'])
                copyrightNode.appendNode('option', [name: 'myLocal',value: 'true'])
                copyrightConfig.module2copyright[0].appendNode('element',[module: 'All', copyright: 'APL 2'])

            }
        }
   }
   workspace {
        iws {
            withXml { provider ->
                final node = provider.asNode()
                def runMgr = node.component.find { it.'@name' == 'RunManager' }
                def runConfig = runMgr.appendNode('configuration', [default: 'false', name: 'Launch',
                        type: 'GroovyScriptRunConfiguration', factoryName: 'Groovy' ] )
                runConfig.appendNode('module', [name: "Napili"])
                runConfig.appendNode('setting', [name: "path", value: '$PROJECT_DIR$/build.gradle'])
                runConfig.appendNode('setting', [name: "vmparams", value: ''])
                runConfig.appendNode('setting', [name: "params", value: 'launch'])
                runConfig.appendNode('setting', [name: "workDir", value: '$PROJECT_DIR$'])
                runConfig.appendNode('setting', [name: "debug", value: 'false'])
                runConfig.appendNode('RunnerSettings', [RunnerId: 'Launch'])
                runConfig.appendNode('ConfigurationWrapper', [RunnerId: 'Launch'])
                def method = runConfig.appendNode('method')
                method.appendNode('option', [name: 'Make', enabled: 'false'])
            }
        }
    }
}
